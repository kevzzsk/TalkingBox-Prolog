%{
clear all; close all; clc;
javaaddpath('C:\Program Files\swipl\lib\jpl.jar');
%Classpath=C:\Program Files\swipl\lib\jpl.jar
%}
%%

function Script_demo_interaction
%clc;
%javaaddpath('C:\Program Files\swipl\lib\jpl.jar');
Dir1 = 'SOFTWARE\SWI\Prolog';
% rmpath([matlabroot '\toolbox\local\librarypath.txt']);
Variables = winqueryreg('name', 'HKEY_LOCAL_MACHINE', Dir1);
ind=find(strcmpi(Variables,'home'));
setting = winqueryreg('HKEY_LOCAL_MACHINE', Dir1, Variables{ind});
javaaddpath([num2str(setting) '\lib\jpl.jar']);


ReadFile=[['' char(13) '' char(10) 'ask(trekking,0).' char(13) '' char(10) '/*' char(13) '' char(10) 'Count_romantic = 0.' char(13) '' char(10) 'Count_outdoorsy = 0.' char(13) '' char(10) 'Count_social = 0.' char(13) '' char(10) 'Count_health_freak = 0.' char(13) '' char(10) 'Count_loner = 0.*/' char(13) '' char(10) 'a.' char(13) '' char(10) '/*member of a list */' char(13) '' char(10) 'a.' char(13) '' char(10) '/*' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'like(Y), related(X,Y), X\=Y, subtract(all(ALL), memorize(REMOVE), NEW), member(X,NEW).' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'dislike(Y), not(related(X,Y)), X\=Y, subtract(all(ALL), memorize(REMOVE), NEW), member(X,NEW).' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'not(related(X,Y)),  X\=Y, subtract(all(ALL), memorize(REMOVE), NEW), member(X,NEW).' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'subtract(all(ALL), memorize(REMOVE), NEW), member(X,NEW).' char(13) '' char(10) '' char(9) '*/' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'like(Y), related(X,Y).' char(13) '' char(10) 'ask(X,Y):-' char(13) '' char(10) '' char(9) 'random(X).' char(13) '' char(10) '' char(9) '' char(13) '' char(10) '' char(9) '' char(13) '' char(10) '/* member of a list*/' char(13) '' char(10) 'member(X,[X|_]).' char(13) '' char(10) 'member(X,[_|R]) :- member(X,R).' char(13) '' char(10) '/* takeout a member from a list*/' char(13) '' char(10) 'takeout(X,[X|R],R).' char(13) '' char(10) 'takeout(X,[F|R],[F|S]) :- takeout(X,R,S).' char(13) '' char(10) '/* append a member to a list*/' char(13) '' char(10) 'append([A | B], C, [A | D]) :- append(B, C, D).' char(13) '' char(10) '' char(9) 'append([], A, A).' char(13) '' char(10) '/* Counter increment function ' char(13) '' char(10) 'count_romantic(1,0).' char(13) '' char(10) 'count_romantic(X,Y):- X is Y +1.' char(13) '' char(10) '' char(13) '' char(10) 'related(X,Y) tests if Y is in a list that contains X */' char(13) '' char(10) 'a.' char(13) '' char(10) '/*' char(13) '' char(10) 'related(X,Y):- member(X,romantic),member(Y,romantic),succ(Count_romantic,Count_romantic).' char(13) '' char(10) 'related(X,Y):- member(X,outdoorsy),member(Y,outdoorsy),succ(Count_outdoorsy,Count_outdoorsy).' char(13) '' char(10) 'related(X,Y):- member(X,social),member(Y,social),succ(Count_social,Count_social).' char(13) '' char(10) 'related(X,Y):- member(X,health_freak),member(Y,health_freak),succ(Count_health_freak,Count_health_freak).' char(13) '' char(10) 'related(X,Y):- member(X,loner),member(Y,loner),succ(Count_loner,Count_loner).*/' char(13) '' char(10) 'related(X,Y):- romantic(L),member(X,L),member(Y,L).' char(13) '' char(10) '/*,succ(Count_romantic,Count_romantic).*/' char(13) '' char(10) 'related(X,Y):- outdoorsy(L),member(X,L),member(Y,L).' char(13) '' char(10) '/*,succ(Count_outdoorsy,Count_outdoorsy).*/' char(13) '' char(10) 'related(X,Y):- social(L),member(X,L),member(Y,L).' char(13) '' char(10) '/*,succ(Count_social,Count_social).*/' char(13) '' char(10) 'related(X,Y):- health_freak(L),member(X,L),member(Y,L).' char(13) '' char(10) '/*,succ(Count_health_freak,Count_health_freak).*/' char(13) '' char(10) 'related(X,Y):- loner(L),member(X,L),member(Y,L).' char(13) '' char(10) '' char(13) '' char(10) 'random(X):- romantic(L),member(X,L).' char(13) '' char(10) '/*,succ(Count_romantic,Count_romantic).*/' char(13) '' char(10) 'random(X):- outdoorsy(L),member(X,L).' char(13) '' char(10) '/*,succ(Count_outdoorsy,Count_outdoorsy).*/' char(13) '' char(10) 'random(X):- social(L),member(X,L).' char(13) '' char(10) '/*,succ(Count_social,Count_social).*/' char(13) '' char(10) 'random(X):- health_freak(L),member(X,L).' char(13) '' char(10) '/*,succ(Count_health_freak,Count_health_freak).*/' char(13) '' char(10) 'random(X):- loner(L),member(X,L).' char(13) '' char(10) '/*,succ(Count_loner,Count_loner).*/' char(13) '' char(10) '' char(13) '' char(10) 'romantic([gifts,wine,dinner,candlelight,rains,tea,concert,night,poetry,music,movie,dating,magic,novels,stories,roses,bouquets,courtship,chickflicks,cruise,breeze,diaries,painting]).' char(13) '' char(10) 'outdoorsy([picnic,trekking,soccer,sports,jogging,kayaking,parks,event,woods,mountains,beaches,cricket,action_movies,dogs,lakes,fairs,swimming,breeze,fitness,water]).' char(13) '' char(10) 'social([coffee,picnic,friends,party,beer,music,concert,event,movie,soccer,dinner,gifts,gardens, roses, flowers,bouquet,cricket,board_games,cafe,netflix,dogs,networking,exhibitions,fairs,debates]).' char(13) '' char(10) 'health_freak([sports,tea,fruitjuice,smoothie,trekking,training,jogging,soccer,sweating,sleeping,swimming,lakes,exercise,burpees,fitness,cats,water,music]).' char(13) '' char(10) 'loner([books,coffee,woods,candlelight,sleeping,training,jogging,night,tea,beaches,poetry,tea,rains,fiction, novels,board_games,netflix,cats,music,painting,sketching,writing,diaries]).' char(13) '' char(10) '' char(13) '' char(10) '/*Do not know what is below this*/' char(13) '' char(10) 'all(L):- flatten([romantic(X),outdoorsy(X),social(X),health_freak(X),loner(X)], L).' char(13) '' char(10) '' char(13) '' char(10) 'flatten(List, FlatList) :-' char(13) '' char(10) 'flatten(List, [], FlatList0),!,FlatList = FlatList0.' char(13) '' char(10) 'flatten(Var, Tl, [Var|Tl]) :- var(Var),!.' char(13) '' char(10) 'flatten([], Tl, Tl) :- !.' char(13) '' char(10) 'flatten([Hd|Tl], Tail, List) :-' char(13) '' char(10) '  !,' char(13) '' char(10) '  flatten(Hd, FlatHeadTail, List),' char(13) '' char(10) '  flatten(Tl, Tail, FlatHeadTail).' char(13) '' char(10) 'flatten(NonList, Tl, [NonList|Tl]).' char(13) '' char(10) '/*Do not know what is above this*/' char(13) '' char(10) '' char(13) '' char(10) '' char(13) '' char(10) 'like(X).' char(13) '' char(10) 'dislike(X).' char(13) '' char(10) 'a.']];
out      = fopen('interactive.pl', 'w');
fwrite(out, ReadFile, 'char');
fclose(out);
prolog_object=org.jpl7.Query('consult(''interactive.pl'').');
prolog_object.hasSolution;
%%
Demo_Interaction;
